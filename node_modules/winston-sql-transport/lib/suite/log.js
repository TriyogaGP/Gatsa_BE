"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @module 'logs'
 * @fileoverview log test suite for winston-transport
 * @license MIT
 * @author Andrei Tretyakov <andrei.tretyakov@gmail.com>
 */
var assert_1 = __importStar(require("assert"));
var info = {
    level: 'debug',
    message: 'message',
};
exports.default = (function (transport) {
    describe(".log()", function () {
        it('should be present', function () {
            (0, assert_1.ok)(transport.log);
            (0, assert_1.strictEqual)('function', typeof transport.log);
        });
        it('should return true without callback', function () {
            var result = transport.log(info);
            (0, assert_1.default)(true, result);
        });
        it('should return true with callback', function () {
            var result = transport.log(info, function (_) {
                var status = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    status[_i - 1] = arguments[_i];
                }
                (0, assert_1.default)(true, status);
            });
            (0, assert_1.default)(true, result);
        });
        it('should emit the `logged` event', function (done) {
            transport.once('logged', function () {
                done();
            });
            transport.log(info);
        });
        afterAll(function () { return transport.flush(); });
    });
});
