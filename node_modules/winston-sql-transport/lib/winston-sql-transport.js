"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SqlTransport = exports.ClientType = void 0;
/**
 * @module 'winston-sql-transport'
 * @fileoverview Winston universal SQL transport for logging
 * @license MIT
 * @author Andrei Tretyakov <andrei.tretyakov@gmail.com>
 */
var knex_1 = require("knex");
var moment_1 = __importDefault(require("moment"));
var winston_transport_1 = __importDefault(require("winston-transport"));
var util_1 = require("util");
var helpers_1 = require("./helpers");
var ClientType;
(function (ClientType) {
    ClientType[ClientType["mssql"] = 0] = "mssql";
    ClientType[ClientType["mysql2"] = 1] = "mysql2";
    ClientType[ClientType["pg"] = 2] = "pg";
})(ClientType = exports.ClientType || (exports.ClientType = {}));
var SqlTransport = /** @class */ (function (_super) {
    __extends(SqlTransport, _super);
    /**
     * Constructor for the universal transport object.
     * @constructor
     * @param {Object} options
     * @param {string} options.client - Database client
     * @param {string} options.connection - Database connection uri | object
     * @param {string} [options.label] - Label stored with entry object if defined.
     * @param {string} [options.level=info] - Level of messages that this transport
     * should log.
     * @param {string} [options.name] - Transport instance identifier. Useful if you
     * need to create multiple universal transports.
     * @param {boolean} [options.silent=false] - Boolean flag indicating whether to
     * suppress output.
     * @param {string} [options.tableName=winston_logs] - The name of the table you
     * want to store log messages in.
     */
    function SqlTransport(options) {
        var _this = _super.call(this) || this;
        var client = options.client, _a = options.connection, connection = _a === void 0 ? {} : _a, _b = options.defaultMeta, defaultMeta = _b === void 0 ? {} : _b, _c = options.label, label = _c === void 0 ? '' : _c, _d = options.level, level = _d === void 0 ? 'info' : _d, _e = options.name, name = _e === void 0 ? 'SqlTransport' : _e, _f = options.silent, silent = _f === void 0 ? false : _f, _g = options.tableName, tableName = _g === void 0 ? 'winston_logs' : _g;
        if (!client) {
            throw new Error('You have to define knex client');
        }
        _this.client = (0, knex_1.knex)({
            client: client,
            connection: connection,
        });
        _this.defaultMeta = defaultMeta;
        _this.label = label;
        _this.level = level;
        _this.name = name;
        _this.silent = silent;
        _this.tableName = tableName;
        return _this;
    }
    /**
     * Create logs table.
     * @return {Promise} result of creation within a Promise
     */
    SqlTransport.prototype.init = function () {
        var _this = this;
        return this.client.schema
            .hasTable(this.tableName)
            .then(function (exists) {
            if (!exists) {
                return _this.client.schema.createTable(_this.tableName, function (table) {
                    table.increments();
                    table.string('level');
                    table.string('message');
                    table.string('meta');
                    table.timestamp('timestamp').defaultTo(_this.client.fn.now());
                });
            }
            return exists;
        });
    };
    /**
     * End the connection
     * Return a Promise which resolves when all queries are finished and the underlying connections are closed.
     * @return {Promise} result within a Promise
     */
    SqlTransport.prototype.end = function () {
        return this.client.destroy();
    };
    /**
     * Flush all logs
     * Return a Promise which resolves when all logs are finished.
     * @return {Promise} result within a Promise
     */
    SqlTransport.prototype.flush = function () {
        return this.client.from(this.tableName).del();
    };
    /**
     * Core logging method exposed to Winston. Metadata is optional.
     * @param {Object} info
     * @param {string} [info.level] - Level at which to log the message.
     * @param {string} [info.message] - Message to log
     * @param {Function} callback - Continuation to respond to when complete.
     */
    SqlTransport.prototype.log = function (info, callback) {
        var _this = this;
        setImmediate(function () {
            _this.emit('logged', info);
        });
        if (this.silent !== true) {
            var _a = this, client_1 = _a.client, defaultMeta = _a.defaultMeta, tableName_1 = _a.tableName;
            var level = info.level, message = info.message, meta = __rest(info, ["level", "message"]);
            var log_1 = {
                level: level,
                message: message,
                meta: JSON.stringify(__assign(__assign({}, meta), defaultMeta)),
                timestamp: (0, moment_1.default)().utc().toDate(),
            };
            var logQuery = function (cb) { return __awaiter(_this, void 0, void 0, function () {
                var error_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, client_1.insert(log_1).into(tableName_1)];
                        case 1:
                            _a.sent();
                            return [3 /*break*/, 3];
                        case 2:
                            error_1 = _a.sent();
                            cb(error_1);
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/];
                    }
                });
            }); };
            logQuery(function (error) {
                if (error) {
                    return (0, helpers_1.handleCallback)(callback, error);
                }
                return (0, helpers_1.handleCallback)(callback, null, true);
            });
        }
    };
    /**
     * Query the transport. Options object is optional.
     * @param {Object} options - Loggly-like query options for this instance.
     * @param {string} [options.from] - Start time for the search.
     * @param {string} [options.until=now] - End time for the search. Defaults to "now".
     * @param {string} [options.rows=100] - Limited number of rows returned by search. Defaults to 100.
     * @param {string} [options.order=desc] - Direction of results returned, either "asc" or "desc".
     * @param {string[]} [options.fields=[]]
     * @param {Function} callback - Continuation to respond to when complete.
     */
    SqlTransport.prototype.query = function (options, callback) {
        var _a = options.fields, fields = _a === void 0 ? [] : _a;
        var query = this.client.select(fields).from(this.tableName);
        if (options.from && options.until) {
            query = query.whereBetween('timestamp', [
                (0, moment_1.default)(options.from).utc().toDate(),
                (0, moment_1.default)(options.until).utc().toDate(),
            ]);
        }
        if (options.rows) {
            query = query.limit(options.rows);
        }
        if (options.order) {
            query = query.orderBy('timestamp', options.order);
        }
        var queryQuery = (0, util_1.callbackify)(function () { return query; });
        queryQuery(function (error, data) {
            if (error) {
                return (0, helpers_1.handleCallback)(callback, error);
            }
            return (0, helpers_1.handleCallback)(callback, null, data);
        });
    };
    return SqlTransport;
}(winston_transport_1.default));
exports.SqlTransport = SqlTransport;
